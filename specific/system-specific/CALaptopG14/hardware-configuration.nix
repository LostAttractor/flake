# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  boot.initrd.availableKernelModules = [
    "nvme"
    "xhci_pci"
    "usbhid"
  ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];
  # https://wiki.archlinux.org/title/Power_management/Suspend_and_hibernate#Hibernation_into_swap_file_on_Btrfs
  # https://sawyershepherd.org/post/hibernating-to-an-encrypted-swapfile-on-btrfs-with-nixos/
  boot.resumeDevice = "/dev/disk/by-uuid/fe8d27b3-11bf-4939-a414-d1d359c26083";
  boot.kernelParams = [ "resume_offset=18883840" ];

  # Use systemd-cryptenroll to auto unlock luks partition
  boot.initrd.systemd.enable = true;

  security.tpm2.enable = true;
  security.tpm2.pkcs11.enable = true;
  security.tpm2.pkcs11.package = pkgs.tpm2-pkcs11.override { abrmdSupport = false; }; # Using Kernel RM
  security.tpm2.tctiEnvironment.enable = true;

  environment.systemPackages = with pkgs; [
    (tpm2-tools.override { abrmdSupport = false; })
    tpm2-tss
  ];

  boot.initrd.luks.devices."lvm-encrypted".device = "/dev/disk/by-uuid/468b2786-745a-4937-9123-4f4e5ba58d12";

  fileSystems."/" = {
    device = "tmpfs";
    fsType = "tmpfs";
    options = [ "mode=755" ];
  };

  fileSystems."/root" = {
    device = "/dev/disk/by-uuid/fe8d27b3-11bf-4939-a414-d1d359c26083";
    fsType = "btrfs";
    options = [
      "subvol=root"
      "compress=zstd"
    ];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/fe8d27b3-11bf-4939-a414-d1d359c26083";
    fsType = "btrfs";
    options = [
      "subvol=home"
      "compress=zstd"
    ];
  };

  fileSystems."/persistent" = {
    device = "/dev/disk/by-uuid/fe8d27b3-11bf-4939-a414-d1d359c26083";
    fsType = "btrfs";
    options = [
      "subvol=persistent"
      "compress=zstd"
    ];
    neededForBoot = true;
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/fe8d27b3-11bf-4939-a414-d1d359c26083";
    fsType = "btrfs";
    options = [
      "subvol=nix"
      "compress=zstd"
      "noatime"
    ];
  };

  fileSystems."/swap" = {
    device = "/dev/disk/by-uuid/fe8d27b3-11bf-4939-a414-d1d359c26083";
    fsType = "btrfs";
    options = [
      "subvol=swap"
      "noatime"
    ];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/C784-FC44";
    fsType = "vfat";
  };

  swapDevices = [ { device = "/swap/swapfile"; } ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp2s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
